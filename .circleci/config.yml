version: 2.1

executors:
  java-executor:
    docker:
      - image: cimg/openjdk:17.0
    working_directory: ~/project

  machine-executor:
    machine:
      image: ubuntu-2204:2023.07.2
    working_directory: ~/project

jobs:
  # 后端测试和构建
  backend-test:
    executor: java-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - maven-deps-v1-{{ checksum "pom.xml" }}
      - run:
          name: Download Dependencies
          command: mvn dependency:go-offline
      - save_cache:
          paths:
            - ~/.m2
          key: maven-deps-v1-{{ checksum "pom.xml" }}
      - run:
          name: Run Tests
          command: mvn test
      - store_test_results:
          path: target/surefire-reports
      - store_artifacts:
          path: target/surefire-reports

  backend-build:
    executor: java-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - maven-deps-v1-{{ checksum "pom.xml" }}
      - run:
          name: Build Application
          command: mvn clean package -DskipTests
      - store_artifacts:
          path: target/*.jar
          destination: build-artifacts
      - persist_to_workspace:
          root: .
          paths:
            - target/*.jar
            - Dockerfile
            - docker-compose*.yml
            - scripts

  # 测试环境 - 完整应用栈测试
  test-environment:
    executor: machine-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install Docker Compose
          command: |
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
      - run:
          name: Start Test Application Stack
          command: |
            # 启动完整应用栈
            docker-compose -f docker-compose.test.yml up -d
            # 等待服务启动
            sleep 90
      - run:
          name: Run Integration Tests
          command: |
            # 健康检查
            timeout 300 bash -c 'until curl -f http://localhost:8080/actuator/health; do sleep 5; done'
            echo "Backend health check passed"
            
            # API测试
            curl -f http://localhost:8080/actuator/info || echo "Info endpoint not available"
            
            # 数据库连接测试
            docker-compose -f docker-compose.test.yml exec -T database mysql -u test_user -ptest_pass -e "SELECT 1" || echo "Database test completed"
      - run:
          name: Collect Logs
          command: |
            mkdir -p /tmp/logs
            docker-compose -f docker-compose.test.yml logs backend > /tmp/logs/backend.log
            docker-compose -f docker-compose.test.yml logs database > /tmp/logs/database.log
            docker-compose -f docker-compose.test.yml logs redis > /tmp/logs/redis.log
          when: always
      - store_artifacts:
          path: /tmp/logs
          destination: test-logs
      - run:
          name: Cleanup Test Environment
          command: |
            docker-compose -f docker-compose.test.yml down -v
            docker system prune -f
          when: always

  # 生产环境 - 长期运行
  production-environment:
    executor: machine-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install Docker Compose
          command: |
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
      - run:
          name: Deploy Production Stack
          command: |
            # 启动生产环境
            docker-compose -f docker-compose.prod.yml up -d
            # 等待服务启动
            sleep 120
      - run:
          name: Health Check and Get Access Info
          command: |
            # 健康检查
            timeout 300 bash -c 'until curl -f http://localhost:8080/actuator/health; do sleep 5; done'
            echo "Production backend health check passed"
            
            # 获取外部访问IP
            echo "=== 生产环境访问信息 ==="
            EXTERNAL_IP=$(curl -s http://checkip.amazonaws.com)
            echo "后端API地址: http://$EXTERNAL_IP:8080"
            echo "健康检查: http://$EXTERNAL_IP:8080/actuator/health"
            echo "数据库地址: $EXTERNAL_IP:3306"
            echo "Redis地址: $EXTERNAL_IP:6379"
      - run:
          name: Setup Deploy Marker
          command: |
            # 记录部署信息
            echo "=== 部署信息 ==="
            echo "部署时间: $(date)"
            echo "Git提交: $CIRCLE_SHA1"
            echo "分支: $CIRCLE_BRANCH"
            echo "构建号: $CIRCLE_BUILD_NUM"
      - run:
          name: Setup Monitoring
          command: |
            # 收集应用日志
            mkdir -p /tmp/monitoring
            docker logs food-backend-prod > /tmp/monitoring/backend.log 2>&1 || echo "Backend logs collected"
            docker logs food-database-prod > /tmp/monitoring/database.log 2>&1 || echo "Database logs collected"
            docker logs food-redis-prod > /tmp/monitoring/redis.log 2>&1 || echo "Redis logs collected"
            
            # 监控资源使用
            docker stats --no-stream > /tmp/monitoring/resource-usage.log
            
            # 健康检查脚本
            echo '#!/bin/bash' > /tmp/monitoring/health-check.sh
            echo 'curl -f http://localhost:8080/actuator/health' >> /tmp/monitoring/health-check.sh
            chmod +x /tmp/monitoring/health-check.sh
      - store_artifacts:
          path: /tmp/monitoring
          destination: monitoring-logs

  # 通知job (替代Slack orb)
  notify-success:
    executor: java-executor
    steps:
      - run:
          name: Notify Success
          command: |
            echo "=== 部署成功通知 ==="
            echo "项目: Food Information Backend"
            echo "分支: $CIRCLE_BRANCH"
            echo "提交: $CIRCLE_SHA1"
            echo "构建: $CIRCLE_BUILD_NUM"
            echo "时间: $(date)"
            echo "状态: ✅ 部署成功"

  notify-failure:
    executor: java-executor
    steps:
      - run:
          name: Notify Failure
          command: |
            echo "=== 部署失败通知 ==="
            echo "项目: Food Information Backend"
            echo "分支: $CIRCLE_BRANCH"
            echo "提交: $CIRCLE_SHA1"
            echo "构建: $CIRCLE_BUILD_NUM"
            echo "时间: $(date)"
            echo "状态: ❌ 部署失败"

workflows:
  food-information-backend-pipeline:
    jobs:
      # 1. 测试和构建
      - backend-test:
          filters:
            branches:
              only: [develop, main]
      
      - backend-build:
          requires:
            - backend-test
          filters:
            branches:
              only: [develop, main]
      
      # 2. 测试环境自动部署
      - test-environment:
          requires:
            - backend-build
          filters:
            branches:
              only: [develop, main]
      
      # 3. 手动批准生产部署
      - hold-production:
          type: approval
          requires:
            - test-environment
          filters:
            branches:
              only: main
      
      # 4. 生产环境部署
      - production-environment:
          requires:
            - hold-production
          filters:
            branches:
              only: main
      
      # 5. 成功通知
      - notify-success:
          requires:
            - test-environment
          filters:
            branches:
              only: [develop, main]
      
      # 6. 失败通知 (当任何job失败时)
      - notify-failure:
          requires:
            - backend-test
            - backend-build
            - test-environment
          filters:
            branches:
              only: [develop, main]
          when: on_fail